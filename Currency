using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace classMoney
{
    class Bank
    {
        double money;
        int from, to;

        public Currency(double _money, int _from, int _to)
        {
            this.money = _money;
            this.from = _from;
            this.to = _to;
        }

       public double getMoney()
        {
            switch (from)
            {
                case 0: switch (to) 
                {
                    case 1: money *= 0.01; break; //рубли-доллары
                    case 2: money *= 0.01; break; //рубли-евро
                } break;

                case 1: switch (to)
                    {
                        case 0: money *= 74.14; break; //доллары-рубли
                        case 2: money *= 0.82; break; //доллары-евро
                    } break;

                case 2: switch (to)
                    {
                        case 0: money *= 90.04; break; //евро-рубли
                        case 1: money *= 1.21; break; //евро-доллары
                    } break;
            }
            return money;
        }
    }
}

    class Wallet
    {
        public long rub { get; private set; }
        public byte kop { get; private set; }
        // public long euro{ get; private set; }
        // public byte ecent{ get; private set; }
        // public byte cent{ get; private set; }
        // public long usd { get; private set; }
 
        public Wallet(long rub, byte kop)
        {
            if (kop >= 100 || kop < 0)
                throw new ArgumentException("Количество копеек должно быть от 0 до 99.");
            if (rub < 0)
                throw new ArgumentException("Количество рублей должно быть положительным.");
            this.rub = rub;
            this.kop = kop;
        }
 
        public override string ToString()
        {
            return string.Format("{0},{1:00}", rub, kop);
        }
 
        public static Wallet operator +(Wallet a, Wallet b)
        {
            int kopSum = a.kop + b.kop;
            long rub = a.rub + b.rub + kopSum / 100;
            byte kop = (byte)(kopSum % 100);
            return new Wallet(rub, kop);
        }
        public static Wallet operator -(Wallet a, Wallet b)
        {
            int kopDiff = a.kop - b.kop;
            long rub = a.rub - b.rub;
            if (kopDiff < 0)
            {
                rub--;
                kopDiff += 100;
            }
            byte kop = (byte)(kopDiff % 100);
            return new Wallet(rub, kop);
        }
 
    }
